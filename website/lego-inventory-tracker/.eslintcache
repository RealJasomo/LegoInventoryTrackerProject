[{"C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\index.js":"1","C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\App.jsx":"2","C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\store\\index.js":"3","C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\store\\actions\\actions.js":"4","C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\store\\local.js":"5","C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\store\\reducers\\reducer.js":"6","C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\store\\actions\\actionTypes.js":"7","C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\index.jsx":"8","C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\Profile.jsx":"9","C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\Signuppage.jsx":"10","C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\Loginpage.jsx":"11","C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\UserCollection.jsx":"12","C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\Homepage.jsx":"13","C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\collections\\SetCollection.jsx":"14","C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\collections\\BrickCollection.jsx":"15","C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\cards\\index.jsx":"16","C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\cards\\AddCard.jsx":"17","C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\cards\\SetContainsCard.jsx":"18","C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\cards\\SetCard.jsx":"19","C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\cards\\BrickCard.jsx":"20"},{"size":307,"mtime":1612330577199,"results":"21","hashOfConfig":"22"},{"size":5032,"mtime":1613696870756,"results":"23","hashOfConfig":"22"},{"size":364,"mtime":1612330577200,"results":"24","hashOfConfig":"22"},{"size":204,"mtime":1612330577200,"results":"25","hashOfConfig":"22"},{"size":350,"mtime":1612330577200,"results":"26","hashOfConfig":"22"},{"size":331,"mtime":1612330577201,"results":"27","hashOfConfig":"22"},{"size":37,"mtime":1612330577199,"results":"28","hashOfConfig":"22"},{"size":398,"mtime":1613134447113,"results":"29","hashOfConfig":"22"},{"size":9139,"mtime":1613752767172,"results":"30","hashOfConfig":"22"},{"size":3580,"mtime":1612405001663,"results":"31","hashOfConfig":"22"},{"size":3916,"mtime":1613010699112,"results":"32","hashOfConfig":"22"},{"size":27051,"mtime":1613752767176,"results":"33","hashOfConfig":"22"},{"size":449,"mtime":1612405001661,"results":"34","hashOfConfig":"22"},{"size":2198,"mtime":1613752767183,"results":"35","hashOfConfig":"22"},{"size":2261,"mtime":1613752767180,"results":"36","hashOfConfig":"22"},{"size":202,"mtime":1613134447108,"results":"37","hashOfConfig":"22"},{"size":827,"mtime":1612405001664,"results":"38","hashOfConfig":"22"},{"size":1195,"mtime":1613134447105,"results":"39","hashOfConfig":"22"},{"size":2163,"mtime":1613134447104,"results":"40","hashOfConfig":"22"},{"size":1892,"mtime":1613134447104,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"er374q",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\index.js",[],["86","87"],"C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\App.jsx",[],"C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\store\\index.js",[],"C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\store\\actions\\actions.js",[],"C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\store\\local.js",[],"C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\store\\reducers\\reducer.js",[],"C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\store\\actions\\actionTypes.js",[],"C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\index.jsx",[],"C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\Profile.jsx",["88"],"import React, { Component } from 'react'\r\nimport {FormControl, InputLabel, OutlinedInput, InputAdornment, IconButton, Button, Modal} from '@material-ui/core'\r\nimport { connect } from 'react-redux'\r\nimport { setToken } from '../store/actions/actions'\r\nimport axios from 'axios'\r\n\r\nimport Visibility from '@material-ui/icons/Visibility'\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff'\r\nimport styles from '../css/Profile.module.css'\r\n\r\nclass Profile extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            newPassword: '',\r\n            oldPassword: '',\r\n            confirmPassword: '',\r\n            showOldPassword: false,\r\n            showNewPassword: false,\r\n            showConfirmPassword: false,\r\n            error: '',\r\n            openPassword: false,\r\n            openDelete: false\r\n        }\r\n    }\r\n    \r\n    handleChange = (prop) => async (event) => {\r\n        await this.setState({[prop]: event.target.value});\r\n        if(this.state.newPassword !== this.state.confirmPassword)\r\n            this.setState({error: \"The passwords don't match\"})\r\n        else\r\n            this.setState({error: \"\"})\r\n    };\r\n    \r\n    handlePasswordModalClose = () => this.setState({openPassword: false});\r\n    \r\n    handleDeleteModalClose = () => this.setState({openDelete: false});\r\n\r\n    handleClickShowPassword = (prop) => {\r\n       this.setState({ [prop]: !this.state[prop] });\r\n    };\r\n\r\n    handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n    \r\n    handleUpdatePassword = () =>{\r\n        if(this.state.error=='')\r\n            axios({\r\n                method: 'PUT',\r\n                url:`${process.env.REACT_APP_API_ENDPOINT}/api/users/updatePassword`,\r\n                headers: {\r\n                    \"Authorization\": `Bearer ${this.props.auth.token}`,\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                data: {\r\n                    newPassword: this.state.newPassword,\r\n                    oldPassword: this.state.oldPassword\r\n                }\r\n            }).then((res) => {\r\n                this.handlePasswordModalClose();\r\n            }).catch((err) => {\r\n                this.setState({error: \"Ther was an error updating your credentials\"})\r\n                this.handlePasswordModalClose();\r\n            })\r\n    }\r\n    handleDeleteAccount = () => {\r\n        axios({\r\n            method: 'DELETE',\r\n            url:`${process.env.REACT_APP_API_ENDPOINT}/api/users/delete`,\r\n            headers: {\r\n                \"Authorization\": `Bearer ${this.props.auth.token}`,\r\n            }\r\n        }).then((res) => {\r\n            this.props.setToken(\"\");\r\n            window.location.href=\"/\";\r\n        }).catch((err) => {\r\n            this.setState({error: \"Ther was an error updating your credentials\"})\r\n            this.handleDeleteModalClose();\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <>\r\n             <Modal aria-labelledby=\"modal-title\"\r\n                open={this.state.openPassword}\r\n                onClose={this.handlePasswordModalClose}>\r\n                <div className={styles.paper}>\r\n                    <h1 id=\"modal-title\">Are you sure you want to change your password?</h1>\r\n                    <p>Warning: this action can not be undone</p>\r\n                    <div className={styles.modalButtons}>\r\n                        <Button variant=\"contained\" color=\"secondary\" className={styles.marginRight} onClick={this.handlePasswordModalClose}>close</Button>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.handleUpdatePassword}>confirm</Button>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n            <Modal aria-labelledby=\"modal-title\"\r\n                open={this.state.openDelete}\r\n                onClose={this.handleDeleteModalClose}>\r\n                <div className={styles.paper}>\r\n                    <h1 id=\"modal-title\">Are you sure you want to delete your account?</h1>\r\n                    <p>Warning: this action can not be undone. All user data will be deleted</p>\r\n                    <div className={styles.modalButtons}>\r\n                        <Button variant=\"contained\" color=\"secondary\" className={styles.marginRight} onClick={this.handleDeleteModalClose} >close</Button>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.handleDeleteAccount}>confirm</Button>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n              <h1>Update your Profile:</h1>\r\n              <div className={styles.flex}>\r\n                <h2>Change password: </h2>\r\n                <div>{this.state.error}</div>\r\n                <FormControl className={styles.text} variant=\"outlined\">\r\n                    <InputLabel htmlFor=\"outlined-adornment-password\">Old Password</InputLabel>\r\n                    <OutlinedInput\r\n                        id=\"outlined-adornment-password\"\r\n                        type={this.state.showOldPassword ? 'text' : 'password'}\r\n                        value={this.state.oldPassword}\r\n                        onChange={this.handleChange('oldPassword')}\r\n                        endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                            aria-label=\"toggle password visibility\"\r\n                            onClick={() => {this.handleClickShowPassword('showOldPassword')}}\r\n                            onMouseDown={this.handleMouseDownPassword}\r\n                            edge=\"end\"\r\n                            >\r\n                            {this.state.showOldPassword ? <Visibility /> : <VisibilityOff />}\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                        }\r\n                        labelWidth={70}\r\n                    />\r\n                </FormControl>\r\n                <FormControl className={styles.text}  variant=\"outlined\">\r\n                    <InputLabel htmlFor=\"outlined-adornment-password\">New Password</InputLabel>\r\n                    <OutlinedInput\r\n                        id=\"outlined-adornment-password\"\r\n                        type={this.state.showNewPassword ? 'text' : 'password'}\r\n                        value={this.state.newPassword}\r\n                        onChange={this.handleChange('newPassword')}\r\n                        endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                            aria-label=\"toggle password visibility\"\r\n                            onClick={() => {this.handleClickShowPassword('showNewPassword')}}\r\n                            onMouseDown={this.handleMouseDownPassword}\r\n                            edge=\"end\"\r\n                            >\r\n                            {this.state.showNewPassword ? <Visibility /> : <VisibilityOff />}\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                        }\r\n                        labelWidth={70}\r\n                    />\r\n                </FormControl>\r\n                <FormControl className={styles.text}  variant=\"outlined\">\r\n                    <InputLabel htmlFor=\"outlined-adornment-password\">Confirm Password</InputLabel>\r\n                    <OutlinedInput\r\n                        id=\"outlined-adornment-password\"\r\n                        type={this.state.showConfirmPassword ? 'text' : 'password'}\r\n                        value={this.state.confirmPassword}\r\n                        onChange={this.handleChange('confirmPassword')}\r\n                        endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                            aria-label=\"toggle password visibility\"\r\n                            onClick={() => {this.handleClickShowPassword('showConfirmPassword')}}\r\n                            onMouseDown={this.handleMouseDownPassword}\r\n                            edge=\"end\"\r\n                            >\r\n                            {this.state.showConfirmPassword ? <Visibility /> : <VisibilityOff />}\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                        }\r\n                        labelWidth={70}\r\n                    />\r\n                </FormControl>\r\n                <Button className={styles.update} variant=\"contained\" color=\"primary\" onClick={()=>this.setState({openPassword: true})}>\r\n                Update your password\r\n                </Button>\r\n            </div>\r\n            <hr/>\r\n            <div className={styles.flex}>\r\n                <h2 className={styles.delete}>Delete your account:</h2>\r\n                <Button className={styles.delete} variant=\"contained\" color=\"secondary\" onClick={()=>this.setState({openDelete: true})}>\r\n                Delete your account\r\n                </Button>\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\nconst mapState = state => ({\r\n    auth: state.authToken\r\n})\r\nexport default connect(mapState, {setToken})(Profile);","C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\Signuppage.jsx",[],"C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\Loginpage.jsx",[],"C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\UserCollection.jsx",["89","90","91","92","93","94","95"],"import styles from '../css/Usercollection.module.css'\r\nimport React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport {connect} from 'react-redux'\r\nimport {Modal} from '@material-ui/core'\r\nimport Input from '@material-ui/core/Input'\r\nimport {AddCard} from './cards'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport {SetCard} from './cards'\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\n\r\nimport {TextField, Link, Button, Typography, CssBaseline, Container} from '@material-ui/core'\r\n\r\nclass UserCollection extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            favorites: [],\r\n            owned: [],\r\n            openFavorite: false,\r\n            openOwned: false,\r\n            favoriteItem: null,\r\n            ownedItem: null,\r\n            favoriteQuantity: 1,\r\n            ownedQuantity: 1,\r\n            quantityInUse: 0,\r\n            error:\"\",\r\n            data: [],\r\n            page: 1,\r\n            searchTarget: null,\r\n            searchResults: null,\r\n            id: '',\r\n            showUpdateOwned: false,\r\n            showUpdateFavorite: false,\r\n            searchType: 0,\r\n            availableBricksOnly: false   \r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.fetchFavorites()\r\n        this.fetchOwned()\r\n        this.fetchSets()\r\n    }\r\n    addFavorite = (event) => {\r\n        var urlString = this.props.type.split('s')\r\n        if(this.props.type === \"sets\"){\r\n            urlString = ['set']\r\n        }\r\n        event.preventDefault()\r\n        axios({\r\n            method: 'POST',\r\n            url:process.env.REACT_APP_API_ENDPOINT+`/api/${urlString[0]}/wants?id=`+this.state.favoriteItem,\r\n            headers: {\r\n                \"Authorization\": `Bearer ${this.props.auth.token}`,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            data: {\r\n                quantity: this.state.favoriteQuantity,\r\n                id: this.state.favoriteItem\r\n\r\n            }\r\n        }).then((res) => {\r\n            console.log('completed successfully')\r\n            this.setState({openFavorite: false});\r\n            this.fetchFavorites();\r\n        }).catch((err) => {\r\n            // this.setState({\r\n            //     ...this.state,\r\n            //     error: err.response.data.error\r\n            // });\r\n           this.setState({error: \"Could not update favorites\"})\r\n        })\r\n    }\r\n\r\n    search = (event) => {\r\n        var urlString = this.props.type.split('s')\r\n        var searchType = null\r\n        if(this.props.type === \"sets\"){\r\n            urlString = ['set']\r\n        }\r\n        // if(this.state.searchType == 0) searchType= 'Name'\r\n        // else if(this.state.searchType == 1) searchType= 'ID'\r\n        // else if(this.state.searchType == 2){\r\n        //     if(this.props.type === \"sets\") this.setState({error: \"Cannot search set by color\"})\r\n        //     else searchType= 'Color'\r\n        // } \r\n        \r\n\r\n        \r\n        event.preventDefault()\r\n        axios({\r\n            method: 'POST',\r\n            url:process.env.REACT_APP_API_ENDPOINT+`/api/${urlString[0]}/search`,//?name=`+this.state.searchTarget,\r\n            headers: {\r\n                \"Authorization\": `Bearer ${this.props.auth.token}`,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            data: {\r\n                name: this.state.searchTarget,\r\n                type: this.state.searchType\r\n            }\r\n        }).then((res) => {\r\n            console.log('completed successfully');\r\n            this.setState({searchResults: res.data.data});\r\n            console.log(res.data.data)\r\n        }).catch((err) => {\r\n\r\n           this.setState({error: \"Could not complete search\"})\r\n        })\r\n    }\r\n\r\n\r\n    addOwned = (event) => {\r\n        event.preventDefault()\r\n        var urlString = this.props.type.split('s')\r\n        if(this.props.type === \"sets\"){\r\n            urlString = ['set']\r\n        }\r\n        axios({\r\n            method: 'POST',\r\n           \r\n           url:process.env.REACT_APP_API_ENDPOINT+`/api/${urlString[0]}/owns?id=`+this.state.ownedItem,\r\n            headers: {\r\n                \"Authorization\": `Bearer ${this.props.auth.token}`,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            data: {\r\n                quantity: this.state.ownedQuantity,\r\n                quantityInUse: this.state.quantityInUse,\r\n                id: this.state.ownedItem\r\n            }\r\n        }).then((res) => {\r\n            console.log('completed successfully')\r\n            this.setState({openOwned: false});\r\n            this.fetchOwned();\r\n        }).catch((err) => {\r\n            this.setState({error: \"Could not update owned\"})\r\n        })\r\n    }\r\n\r\n    fetchFavorites(){\r\n        var urlString = this.props.type.split('s')\r\n        if(this.props.type === \"sets\"){\r\n            urlString = ['set']\r\n        } \r\n        axios.get(`${process.env.REACT_APP_API_ENDPOINT}/api/${urlString[0]}/wants`, {\r\n            headers:{\r\n                'Authorization': `Bearer ${this.props.auth.token}`\r\n            }\r\n        }).then((res) => {\r\n            this.setState({favorites: res.data.data});\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    \r\n    fetchOwned(){\r\n        var urlString = this.props.type.split('s')\r\n        if(this.props.type === \"sets\"){\r\n            urlString = ['set']\r\n        }\r\n        if(this.state.availableBricksOnly && this.props.type === \"bricks\"){\r\n            axios.get(`${process.env.REACT_APP_API_ENDPOINT}/api/${urlString[0]}/available`, {\r\n                headers:{\r\n                    'Authorization': `Bearer ${this.props.auth.token}`\r\n                }\r\n            }).then((res) => {\r\n                console.log(res.data.data)\r\n                this.setState({owned: res.data.data})\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            });\r\n\r\n        }\r\n        else{\r\n        axios.get(`${process.env.REACT_APP_API_ENDPOINT}/api/${urlString[0]}/owns`, {\r\n            headers:{\r\n                'Authorization': `Bearer ${this.props.auth.token}`\r\n            }\r\n        }).then((res) => {\r\n            console.log(res.data.data)\r\n            this.setState({owned: res.data.data})\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    }\r\n\r\n    fetchSets() {\r\n        axios.get(process.env.REACT_APP_API_ENDPOINT+`/api/sets/${this.state.page}/50`)\r\n        .then((res) => {\r\n            this.setState({\r\n                data: this.state.data.concat(res.data.data),\r\n                page: this.state.page+1\r\n            })\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    handleOwnedBrickClick = (id) => {\r\n        return async (event) => {\r\n            await this.setState({id: id});\r\n            await this.setState({ownedQuantity: this.getDefaultOwned(), quantityInUse: this.getDefaultOwnedUse(), showUpdateOwned: true})\r\n        }\r\n    }\r\n    handleFavoriteBrickClick = (id) => {\r\n        return async (event) => {\r\n            await this.setState({id: id})\r\n            await this.setState({favoriteQuantity: this.getDefaultFavorite(), showUpdateFavorite: true});\r\n        }\r\n    }\r\n    \r\n    getDefaultOwnedUse = () => {\r\n        if(this.props.type ==='sets')\r\n            return this.state.owned.find(e => e.ID === this.state.id)?.QuantityBuilt;\r\n        else\r\n            return this.state.owned.find(e => e.ID === this.state.id)?.QuantityInUse;\r\n    }\r\n\r\n    getDefaultOwned = () => {\r\n        return this.state.owned.find(e => e.ID === this.state.id)?.Quantity || this.state.ownedQuantity;\r\n    }\r\n    getDefaultFavorite = () => {\r\n        return this.state.favorites.find(e => e.ID === this.state.id)?.Quantity || this.state.favoriteQuantity;\r\n    }\r\n    handleUpdateFavorite = () => {\r\n        var urlString = this.props.type.slice(0,-1);\r\n        axios({\r\n            method: 'POST',\r\n            url:process.env.REACT_APP_API_ENDPOINT+`/api/${urlString}/wants/update`,\r\n            headers: {\r\n                \"Authorization\": `Bearer ${this.props.auth.token}`,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            data: {\r\n                quantity: this.state.favoriteQuantity,\r\n                id: this.state.id\r\n            }\r\n        }).then((res) => {\r\n            console.log('completed successfully')\r\n            this.setState({showUpdateFavorite: false});\r\n            this.fetchFavorites();\r\n        }).catch((err) => {\r\n           this.setState({error: \"Could not update favorites\"})\r\n        })\r\n    }\r\n    handleDelete = (route) => () => {\r\n        var urlString = this.props.type.slice(0,-1);\r\n        axios({\r\n            method: 'DELETE',\r\n            url:process.env.REACT_APP_API_ENDPOINT+`/api/${urlString}/${route}/delete`,\r\n            headers: {\r\n                \"Authorization\": `Bearer ${this.props.auth.token}`,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            data: {\r\n                id: this.state.id\r\n            }\r\n        }).then((res) => {\r\n            console.log('completed successfully')\r\n            if(route === 'wants'){\r\n                this.setState({showUpdateFavorite: false});\r\n                this.fetchFavorites();\r\n            }else{\r\n                this.setState({showUpdateOwned: false});\r\n                this.fetchOwned();\r\n            }\r\n        }).catch((err) => {\r\n           this.setState({error: \"Could not delete favorites\"})\r\n        })\r\n    }\r\n\r\n    handleUpdateOwned = () => {\r\n        var urlString = this.props.type.slice(0,-1);\r\n        axios({\r\n            method: 'POST',\r\n            url:process.env.REACT_APP_API_ENDPOINT+`/api/${urlString}/owns/update`,\r\n            headers: {\r\n                \"Authorization\": `Bearer ${this.props.auth.token}`,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            data: {\r\n                quantity: this.state.ownedQuantity,\r\n                quantityInUse: this.state.quantityInUse,\r\n                id: this.state.id\r\n            }\r\n        }).then((res) => {\r\n            console.log('completed successfully')\r\n            this.setState({showUpdateOwned: false});\r\n            this.fetchOwned();\r\n        }).catch((err) => {\r\n           this.setState({error: \"Could not update favorites\"})\r\n        })\r\n    }\r\n\r\n    getRequirements = () => {\r\n        var urlString = this.props.type.slice(0,-1);\r\n        axios({\r\n            method: 'GET',\r\n            url:process.env.REACT_APP_API_ENDPOINT+`/api/${urlString}/owns/update`,\r\n            headers: {\r\n                \"Authorization\": `Bearer ${this.props.auth.token}`,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            data: {\r\n                quantity: this.state.ownedQuantity,\r\n                quantityInUse: this.state.quantityInUse,\r\n                id: this.state.id\r\n            }\r\n        }).then((res) => {\r\n            console.log('completed successfully')\r\n            this.setState({showUpdateOwned: false});\r\n            this.fetchOwned();\r\n        }).catch((err) => {\r\n           this.setState({error: \"Could not update favorites\"})\r\n        })\r\n    }\r\n\r\n    //onclick\r\n     swapAvailable = async () => {\r\n        console.log(\"ran \" + this.state.availableBricksOnly)\r\n        await this.setState({availableBricksOnly: !this.state.availableBricksOnly})\r\n        this.fetchOwned()\r\n    }\r\n    \r\n    render() {\r\n        function LoadColor(props) {\r\n            const type = props.type;\r\n            if (type=== 'bricks') {\r\n              return <MenuItem value={2}>Color</MenuItem>;\r\n            }\r\n            return (null);\r\n          }\r\n\r\n        let errorMessage;\r\n        const sets = () =>{ \r\n            var data = this.props.data || this.state.data;\r\n            return data.map((data, idx) => {\r\n                return <SetCard key={idx} id={data.ID} url={data.ImageURL} color={data.Color} name={data.Name} quantityOwned={data.Quantity} quantityBuilt={data.QuantityBuilt}/>\r\n            });\r\n        }\r\n        if(this.state.error){\r\n            errorMessage = <div className={styles.warning}>{this.state.error}</div>;\r\n        }\r\n        const CollectionComponent = this.props.component;\r\n        return (\r\n            <>\r\n            <Modal aria-labelledby=\"modal-title\"\r\n            open={this.state.showUpdateFavorite}\r\n            onClose={()=>this.setState({showUpdateFavorite: false})}>\r\n                <div className={styles.paper}>\r\n                    <h1 id=\"modal-title\">Update favorited {this.props.type.slice(0,-1)} {this.state.id}</h1>\r\n                    <Container component=\"main\" maxWidth=\"xs\">\r\n                    <CssBaseline />\r\n                    <h1>Quantity: </h1>\r\n                        <Input type=\"number\"\r\n                        defaultValue={this.state.favoriteQuantity}\r\n                        onChange={e => this.setState({\r\n                            ...this.state,\r\n                            favoriteQuantity: e.target.value\r\n                        })} />\r\n                        <div className={styles.submitContainer}>\r\n                            <Button\r\n                                type=\"button\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={styles.submit}\r\n                                onClick={this.handleUpdateFavorite}\r\n                            >\r\n                               update\r\n                            </Button>\r\n                            <Button\r\n                                type=\"button\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                className={styles.submit}\r\n                                onClick={this.handleDelete('wants')}\r\n                            >\r\n                               delete\r\n                            </Button>\r\n                        </div>\r\n                        </Container>\r\n                </div>\r\n            </Modal>\r\n            <Modal aria-labelledby=\"modal-title\"\r\n            open={this.state.showUpdateOwned}\r\n            onClose={()=>this.setState({showUpdateOwned: false})}>\r\n                <div className={styles.paper}>\r\n                    <h1 id=\"modal-title\">Update Owned {this.props.type.slice(0,-1)} {this.state.id}</h1>\r\n                    <Container component=\"main\" maxWidth=\"xs\">\r\n                    <CssBaseline />\r\n                    <h1>Quantity: </h1>\r\n                        <Input type=\"number\"\r\n                        defaultValue={this.state.ownedQuantity}\r\n                        onChange={e => this.setState({\r\n                            ...this.state,\r\n                            ownedQuantity: e.target.value\r\n                        })} />\r\n                     {this.props.type==='sets'?<h1>Quantity built:</h1>:<h1>Quantity in Use: </h1>}\r\n                        <Input type=\"number\"\r\n                        defaultValue={this.state.quantityInUse}\r\n                        onChange={e => this.setState({\r\n                            ...this.state,\r\n                            quantityInUse: e.target.value\r\n                        })} />\r\n                        <div className={styles.submitContainer}>\r\n                            <Button\r\n                                type=\"button\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={styles.submit}\r\n                                onClick={this.handleUpdateOwned}\r\n                            >\r\n                               update\r\n                            </Button>\r\n                            <Button\r\n                                type=\"button\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                className={styles.submit}\r\n                                onClick={this.handleDelete('owns')}\r\n                            >\r\n                               delete\r\n                            </Button>\r\n                            \r\n                        </div>\r\n                    </Container>\r\n                </div>\r\n            </Modal>\r\n            <Modal aria-labelledby=\"modal-title\"\r\n                open={this.state.openFavorite}\r\n                onClose={()=>this.setState({openFavorite: false})}>\r\n                <div className={styles.paper}>\r\n                    <h1 id=\"modal-title\">Add new {this.props.type.slice(0,-1)} to your wishlist:</h1>\r\n                    <form onSubmit={this.addFavorite}>\r\n                    <Container component=\"main\" maxWidth=\"xs\">\r\n                    <CssBaseline />\r\n                    \r\n                    \r\n                    {errorMessage}\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"favoriteID\"\r\n                            label=\"ID of item to favorite\"\r\n                            name=\"favoriteID\"\r\n                            autoComplete=\"favoriteID\"\r\n                            autoFocus\r\n                            onChange={e => this.setState({\r\n                                ...this.state,\r\n                                favoriteItem: e.target.value\r\n                            })}\r\n                        />\r\n                        <h1>Quantity: </h1>\r\n                        <Input type=\"number\"\r\n                        // variant=\"outlined\"\r\n                        // margin=\"normal\"\r\n                        // required\r\n                        // fullWidth\r\n                        // id=\"favoriteQ\"\r\n                        // label=\"Favorite\"\r\n                        // name=\"favoriteQ\"\r\n                        // autoComplete=\"favoriteQ\"\r\n                        // autoFocus\r\n                        defaultValue='1'\r\n                        onChange={e => this.setState({\r\n                            ...this.state,\r\n                            favoriteQuantity: e.target.value\r\n                        })} />\r\n                        <div className={styles.submitContainer}>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={styles.submit}\r\n                            >\r\n                                Add\r\n                            </Button>\r\n                        </div>\r\n                    </Container>\r\n                    </form>\r\n                </div>\r\n            </Modal>\r\n            {/* Add new item to owned */}\r\n            <Modal aria-labelledby=\"modal-title\"\r\n                open={this.state.openOwned}\r\n                onClose={()=>this.setState({openOwned: false})}>\r\n                <div className={styles.paper}>\r\n                    <h1 id=\"modal-title\">Add new {this.props.type.slice(0,-1)} to your collection:</h1>\r\n                    <form onSubmit={this.addOwned}>\r\n                    <Container component=\"main\" maxWidth=\"xs\">\r\n                    <CssBaseline />\r\n                    {errorMessage}\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"ownedIF\"\r\n                            label=\"Owned\"\r\n                            name=\"ownedID\"\r\n                            autoComplete=\"ownedID\"\r\n                            autoFocus\r\n                            onChange={e => this.setState({\r\n                                ...this.state,\r\n                                ownedItem: e.target.value\r\n                            })}\r\n                        />\r\n                        <h1>Quantity: </h1>\r\n                        <Input type=\"number\"\r\n                        defaultValue='1'\r\n\r\n                        onChange={e => this.setState({\r\n                            ...this.state,\r\n                            ownedQuantity: e.target.value\r\n                        })} />\r\n                        {this.props.type==='sets'?<h1>Quantity built:</h1>:<h1>Quantity in Use: </h1>}\r\n                        <Input type=\"number\"\r\n                        defaultValue='0'\r\n\r\n                        onChange={e => this.setState({\r\n                            ...this.state,\r\n                            quantityInUse: e.target.value\r\n                        })} />\r\n                        <div className={styles.submitContainer}>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={styles.submit}\r\n                            >\r\n                                Add\r\n                            </Button>\r\n                        </div>\r\n                    </Container>\r\n                    </form>\r\n                </div>\r\n            </Modal>\r\n            <div id=\"favorites\">\r\n                    <h1 className={styles.marginLeft}>Wishlist:</h1>\r\n                    <div className={styles.flex}>\r\n                        <AddCard onClick={()=>this.setState({openFavorite: true, favoriteQuantity:1})} />\r\n                        <CollectionComponent data={this.state.favorites}  onChildClick={this.handleFavoriteBrickClick}/>\r\n                    </div>\r\n                </div>\r\n                <div id=\"owned\">\r\n                    <h1 className={styles.marginLeft}>Collection:</h1>\r\n                    {this.props.type === 'bricks' && <Button\r\n                                type=\"submit\"\r\n                                \r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={styles.submit}\r\n                                onClick={this.swapAvailable}\r\n                            >\r\n                                {this.state.availableBricksOnly ? 'Show all bricks' : 'Show available bricks only'}     \r\n                    </Button>}\r\n                    \r\n                    <div className={styles.flex}>\r\n                        <AddCard onClick={()=>this.setState({openOwned: true, ownedQuantity:1, quantityInUse:0})} />\r\n                        <CollectionComponent data={this.state.owned} onChildClick={this.handleOwnedBrickClick} />\r\n                    </div>\r\n            </div>\r\n                    <h1>List of {this.props.type}:</h1>\r\n                    <form onSubmit={this.search}>\r\n                    <Container component=\"main\" maxWidth=\"xs\">\r\n                    <CssBaseline />\r\n                    <div className={styles.searchBar}>\r\n                    {errorMessage}\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"searchID\"\r\n                            label=\"Search\"\r\n                            name=\"searchID\"\r\n                            autoComplete=\"Search\"\r\n                            autoFocus\r\n                            onChange={e => this.setState({\r\n                                ...this.state,\r\n                                searchTarget: e.target.value\r\n                            })}\r\n                        />\r\n                        <h4>Search Attribute:</h4>\r\n                        <Select\r\n                        labelId=\"searchType\"\r\n                        id=\"searchType\"\r\n                        required\r\n                        label=\"Search Attribute\"\r\n                        value={this.state.searchType}\r\n                        onChange={e => this.setState({\r\n                            ...this.state,\r\n                            searchType: e.target.value\r\n                        })}\r\n                        \r\n                        >\r\n                        <MenuItem value={0}>Name</MenuItem>\r\n                        <MenuItem value={1}>ID</MenuItem>\r\n                        {(this.props.type === \"sets\") && (<MenuItem value={2}>Buildable sets (no search string required)</MenuItem>)}\r\n                        {(this.props.type === \"bircks\") && (<MenuItem value={2}>Color</MenuItem>)}\r\n                        {(this.props.type==\"bricks\") && (<MenuItem value={3}>Requirements</MenuItem>)}\r\n                        {console.log(this.state.searchType)}\r\n                        </Select>\r\n                        <div className={styles.submitContainer}>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={styles.submit}\r\n                            >\r\n                                Search\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                    </Container>\r\n                    </form>\r\n            {/* {<InfiniteScroll\r\n            dataLength={this.props.data||this.state.data.length} \r\n            next={this.props.data?()=>{}:this.fetchSets.bind(this)}\r\n            hasMore={true}\r\n            loader={<h4>Loading...</h4>}\r\n            endMessage={\r\n                <p style={{ textAlign: 'center' }}>\r\n                <b>Yay! You have seen it all</b>\r\n                </p>\r\n            }>\r\n            <div className={styles.flex}>\r\n                {sets()}\r\n            </div>\r\n            </InfiniteScroll>} */}\r\n            <div id=\"searched\">\r\n                    <div className={styles.flex}>\r\n                        {console.log(this.state.searchResults)}\r\n                        <CollectionComponent data={this.state.searchResults}/>\r\n                    </div>\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\nconst mapState = state => ({\r\n    auth: state.authToken\r\n})\r\nexport default connect(mapState,null)(UserCollection);","C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\Homepage.jsx",[],"C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\collections\\SetCollection.jsx",["96","97"],"import styles from '../../css/Collection.module.css'\r\nimport React, { Component } from 'react'\r\nimport {SetCard} from '../cards'\r\nimport axios from 'axios'\r\nimport PropTypes from 'prop-types'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\n\r\n\r\nexport default class SetCollection extends Component {\r\n    // static propTypes = {\r\n    //     data: PropTypes.array\r\n    // }\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            page: 1\r\n        }\r\n    }   \r\n    \r\n    componentDidMount(){\r\n        this.fetchSets();\r\n    }\r\n\r\n    fetchSets() {\r\n        axios.get(process.env.REACT_APP_API_ENDPOINT+`/api/sets/${this.state.page}/50`)\r\n        .then((res) => {\r\n            this.setState({\r\n                data: this.state.data.concat(res.data.data),\r\n                page: this.state.page+1\r\n            })\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    normalizeQuantity = num => num||((num==0)?0:undefined)\r\n\r\n    render() {\r\n        const sets = () =>{ \r\n        var data = this.props.data || this.state.data;\r\n        return data.map((data, idx) => {\r\n            return <SetCard onClick={this.props.onChildClick&&this.props.onChildClick(data.ID)} key={idx} id={data.ID} url={data.ImageURL} color={data.Color} name={data.Name} quantityOwned={data.Quantity} quantityBuilt={data.QuantityBuilt} quantityOnWishlist={data.WantsQuantity}/>\r\n        });\r\n    }\r\n        return (\r\n            <InfiniteScroll\r\n            dataLength={this.props.data||this.state.data.length} \r\n            next={this.props.data?()=>{}:this.fetchSets.bind(this)}\r\n            hasMore={true}\r\n            loader={<h4>Loading...</h4>}\r\n            endMessage={\r\n                <p style={{ textAlign: 'center' }}>\r\n                <b>Yay! You have seen it all</b>\r\n                </p>\r\n            }>\r\n            <div className={styles.flex}>\r\n                {sets()}\r\n            </div>\r\n            </InfiniteScroll>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\collections\\BrickCollection.jsx",["98","99"],"C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\cards\\index.jsx",[],"C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\cards\\AddCard.jsx",[],"C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\cards\\SetContainsCard.jsx",[],"C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\cards\\SetCard.jsx",[],"C:\\Users\\morrisjj\\Documents\\csse333Git\\LegoInventoryTrackerProject\\website\\lego-inventory-tracker\\src\\components\\cards\\BrickCard.jsx",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":48,"column":28,"nodeType":"106","messageId":"107","endLine":48,"endColumn":30},{"ruleId":"108","severity":1,"message":"109","line":8,"column":8,"nodeType":"110","messageId":"111","endLine":8,"endColumn":22},{"ruleId":"108","severity":1,"message":"112","line":14,"column":20,"nodeType":"110","messageId":"111","endLine":14,"endColumn":24},{"ruleId":"108","severity":1,"message":"113","line":14,"column":34,"nodeType":"110","messageId":"111","endLine":14,"endColumn":44},{"ruleId":"108","severity":1,"message":"114","line":79,"column":13,"nodeType":"110","messageId":"111","endLine":79,"endColumn":23},{"ruleId":"108","severity":1,"message":"115","line":331,"column":18,"nodeType":"110","messageId":"111","endLine":331,"endColumn":27},{"ruleId":"108","severity":1,"message":"116","line":340,"column":15,"nodeType":"110","messageId":"111","endLine":340,"endColumn":19},{"ruleId":"104","severity":1,"message":"105","line":614,"column":42,"nodeType":"106","messageId":"107","endLine":614,"endColumn":44},{"ruleId":"108","severity":1,"message":"117","line":5,"column":8,"nodeType":"110","messageId":"111","endLine":5,"endColumn":17},{"ruleId":"104","severity":1,"message":"105","line":38,"column":42,"nodeType":"106","messageId":"107","endLine":38,"endColumn":44},{"ruleId":"108","severity":1,"message":"117","line":6,"column":8,"nodeType":"110","messageId":"111","endLine":6,"endColumn":17},{"ruleId":"104","severity":1,"message":"105","line":26,"column":42,"nodeType":"106","messageId":"107","endLine":26,"endColumn":44},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'InfiniteScroll' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Typography' is defined but never used.","'searchType' is assigned a value but never used.","'LoadColor' is defined but never used.","'sets' is assigned a value but never used.","'PropTypes' is defined but never used.","no-global-assign","no-unsafe-negation"]